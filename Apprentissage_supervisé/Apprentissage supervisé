import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from SimConnect import *
import torch
import torch.nn as nn
import torch.optim as optim
import time

def load_model(name, n, k):
    loaded_checkpoint = torch.load(name)
    loaded_model = nn.Sequential(
    nn.Linear(n, k*n),
    nn.ReLU(),
    nn.Linear(k*n, 2*k*n),
    nn.ReLU(),
    nn.Linear(2*k*n,k*n),
    nn.ReLU(),
    nn.Linear(k*n,k),
    nn.ReLU()
    )
    loaded_optimizer = optim.SGD(loaded_model.parameters(), lr=0.01)
    loaded_model.load_state_dict(loaded_checkpoint['model_state_dict'])
    loaded_optimizer.load_state_dict(loaded_checkpoint['optimizer_state_dict'])
    return(loaded_model)

NN_TakeOff = load_model('NN_TakeOff.pth', 6, 3)
NN_Target_Altitude = load_model('NN_Target_Altitude.pth', 8, 2)

def load_model_2(name):
    loaded_checkpoint = torch.load(name)
    loaded_model = nn.Sequential(
    nn.Linear(4, 8),
    nn.ReLU(),
    nn.Linear(8, 16),
    nn.ReLU(),
    nn.Linear(16, 4),
    nn.ReLU(),
    nn.Linear(4,1),
    nn.ReLU()
    )
    loaded_optimizer = optim.SGD(loaded_model.parameters(), lr=0.01)
    loaded_model.load_state_dict(loaded_checkpoint['model_state_dict'])
    loaded_optimizer.load_state_dict(loaded_checkpoint['optimizer_state_dict'])
    return(loaded_model)

NN_Horizontal = load_model_2('NN_Horizontal.pth')

def full_flight(t_alt=4000, t_alt_to=500, t=500):

    sm = SimConnect()
    aq = AircraftRequests(sm, _time=2000)
    ae = AircraftEvents(sm)

    def cur_TakeOff():
        cur = []
        cur.append(aq.get("PLANE_ALT_ABOVE_GROUND") / t_alt_to)
        cur.append((aq.get("PLANE_PITCH_DEGREES") + np.pi / 2) / np.pi)
        cur.append(aq.get("BRAKE_PARKING_POSITION"))
        cur.append(aq.get("GENERAL_ENG_THROTTLE_LEVER_POSITION:1") / 100)
        cur.append(aq.get("GROUND_VELOCITY") / 100)
        cur.append((aq.get("ELEVATOR_POSITION") + 1) / 2)
        return cur

    def cur_Target_Altitude():
        cur = []
        cur.append(aq.get("PLANE_ALTITUDE") / (2*t_alt))
        cur.append(aq.get("PLANE_ALT_ABOVE_GROUND") / (2*t_alt))
        cur.append((aq.get("PLANE_PITCH_DEGREES") + np.pi / 2) / np.pi)
        cur.append((aq.get("PLANE_BANK_DEGREES") + np.pi / 2) / np.pi)
        cur.append(aq.get("AIRSPEED_TRUE") / 600)
        cur.append(abs(aq.get("GPS_COURSE_TO_STEER")-aq.get("PLANE_HEADING_DEGREES_TRUE"))/np.pi)
        cur.append((aq.get("ELEVATOR_POSITION") + 1) / 2)
        cur.append((aq.get("AILERON_POSITION") + 1) / 2)
        return cur

    alt = []
    elev = []
    ailer = []

    plt.ion()  # Turn on interactive mode

    fig, ax = plt.subplots()
    line_elev, = ax.plot([], [], color="g", label='Elevator')
    line_alt, = ax.plot([], [], label=('Altitude cible : '+str(t_alt)+' ft'))
    line_ailer, = ax.plot([], [], color="m", label='Aileron')
    ax.set_xlim(0, t)
    ax.set_ylim(0, 2 * t_alt)
    plt.text(t+5, t_alt/10, 'Down', va='bottom', ha='left', color='g')
    plt.text(t+5, t_alt, 'Keep', va='center', ha='left')
    plt.text(t+5, t_alt * 19/10, 'Up', va='top', ha='left', color='g')
    plt.text(t + 5, t_alt * 2 / 10, 'Left', va='bottom', ha='left', color='m')
    plt.text(t + 5, t_alt * 18 / 10, 'Right', va='top', ha='left', color='m')
    ax.legend()

    ax.set_xlabel('Temps (s)')
    ax.set_ylabel('Altitude (ft)')

    c_alt = aq.get("PLANE_ALT_ABOVE_GROUND") / t_alt_to
    i = 0

    ae.find("THROTTLE_FULL")()
    b = True

    while c_alt < 1 and i < t :

        alt_n = aq.get("PLANE_ALTITUDE")
        alt.append(alt_n)

        cur = cur_TakeOff()
        X = torch.tensor(cur, dtype=torch.float32)
        y = NN_TakeOff(X)

        if y[0] < 0.45:
            ae.find("ELEV_DOWN")()
            print("Step " + str(i) + ": Down")
            elev.append(t_alt / 10)
        elif y[0] > 0.55:
            ae.find("ELEV_UP")()
            print("Step " + str(i) + ": Up")
            elev.append(t_alt * 19 / 10)
        elif y[2] < 0.5 and b:
            b = False
            ae.find("PARKING_BRAKES")()
            print("Step " + str(i) + ": Parking Break Down")
            elev.append(t_alt)
        else:
            print("Step " + str(i) + ": Keep")
            elev.append(t_alt)

        ailer.append(t_alt)

        line_elev.set_data(range(i + 1), elev)
        line_alt.set_data(range(i + 1), alt)
        line_ailer.set_data(range(i + 1), ailer)
        plt.pause(0.01)

        i += 1
        time.sleep(1)
        c_alt = cur[0]

    print("Fin de la phase de décollage ;\nChangement de NN ;\n")

    plt.axvline(x=i, color = 'r', label="Changement de réseau")

    while i < t :

        alt_n = aq.get("PLANE_ALTITUDE")
        alt.append(alt_n)

        cur = cur_Target_Altitude()
        cur_horizontal = [cur[3], cur[4], cur[5], cur[7]]
        X = torch.tensor(cur, dtype=torch.float32)
        X_horizontal = torch.tensor(cur_horizontal, dtype=torch.float32)
        y = NN_Target_Altitude(X)
        y_horizontal = NN_Horizontal(X_horizontal)

        if y[0] < 0.45:
            ae.find("ELEV_DOWN")()
            print("Step " + str(i) + ": Elevators - Down")
            elev.append(t_alt / 10)
        elif y[0] > 0.55:
            ae.find("ELEV_UP")()
            print("Step " + str(i) + ": Elevators - Up")
            elev.append(t_alt * 19 / 10)
        else:
            print("Step " + str(i) + ": Elevators - Keep")
            elev.append(t_alt)
        if y_horizontal[0] < 0.45:
            ae.find("AILERONS_LEFT")()
            print("Step " + str(i) + ": Ailerons - Left")
            ailer.append(t_alt / 10)
        elif y_horizontal[0] > 0.55:
            ae.find("AILERONS_RIGHT")()
            print("Step " + str(i) + ": Ailerons - Right")
            ailer.append(t_alt * 19 / 10)
        else:
            print("Step " + str(i) + ": Ailerons - Keep")
            ailer.append(t_alt)

        line_elev.set_data(range(i + 1), elev)
        line_alt.set_data(range(i + 1), alt)
        line_ailer.set_data(range(i + 1), ailer)
        plt.pause(0.01)

        i += 1
        time.sleep(1)

    plt.ioff()
    plt.show()


full_flight(1500, 100, 120)
