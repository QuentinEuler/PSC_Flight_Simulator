import numpy as np
import matplotlib.pyplot as plt
from SimConnect import *
import torch
import torch.nn as nn
import torch.optim as optim
import time

def new_dataset(t_alt=500):

    sm = SimConnect()
    aq = AircraftRequests(sm, _time=2000)
    ae = AircraftEvents(sm)

    def cur_state(t_alt):
        cur = []
        cur.append(aq.get("PLANE_ALT_ABOVE_GROUND") / t_alt)
        cur.append((aq.get("PLANE_PITCH_DEGREES") + np.pi / 2) / np.pi)
        cur.append(aq.get("BRAKE_PARKING_POSITION"))
        cur.append(aq.get("GENERAL_ENG_THROTTLE_LEVER_POSITION:1") / 100)
        cur.append(aq.get("GROUND_VELOCITY") / 100)
        cur.append((aq.get("ELEVATOR_POSITION") + 1) / 2)
        return cur

    fileX = open("temp_X.txt", "w")
    fileY = open("temp_Y.txt", "w")

    i = 0
    c_alt = 0
    while c_alt < 1 :

        cur = cur_state(t_alt)
        c_alt = cur[0]
        bp0 = cur[2]
        thr0 = cur[3]
        elev0 = cur[5]
        for j in range(len(cur)):
            fileX.write(str(cur[j]) + " ")
        fileX.write("\n")

        y = [0.5, 1, 1]
        time.sleep(1)
        elev = (aq.get("ELEVATOR_POSITION") + 1) / 2
        thr = aq.get("GENERAL_ENG_THROTTLE_LEVER_POSITION:1")/100
        bp = aq.get("BRAKE_PARKING_POSITION")
        if elev < elev0:
            y[0] = 0
        elif elev > elev0:
            y[0] = 1
        elif thr > thr0:
            y[1] = 1
        if bp < bp0:
            y[2] = 0

        fileY.write(str(y[0]) + " " + str(y[1]) + " " + str(y[2]) + "\n")
        i+=1
        print(str(i)+" valeurs enregistrées")

    fileX.close()
    fileY.close()


def import_data():
    dataX = []
    dataY = []

    with open('data_X.txt', 'r') as fileX:
        lines = fileX.readlines()
    for line in lines:
        val = [float(num) for num in line.split()]
        dataX.append(val)

    with open('data_Y.txt', 'r') as fileY:
        lines = fileY.readlines()
    for line in lines:
        val = [float(num) for num in line.split()]
        dataY.append(val)

    fileX.close()
    fileY.close()
    return dataX, dataY


# Architecture du modèle :

model = nn.Sequential(
    nn.Linear(6, 18),
    nn.ReLU(),
    nn.Linear(18, 36),
    nn.ReLU(),
    nn.Linear(36, 18),
    nn.ReLU(),
    nn.Linear(18, 3),
    nn.ReLU()
)


# Algorithme d'entrainement :

def training(datasetX, datasetY):

    n_epochs = 10
    n_batchs = len(datasetX)//10
    batch_size = 10

    optimizer = optim.SGD(model.parameters(), lr=0.001)
    X = torch.tensor([datasetX[i] for i in range(len(datasetX))], dtype=torch.float32)
    y = torch.tensor([datasetY[i] for i in range(len(datasetY))], dtype=torch.float32)

    for epoch in range(n_epochs):
        for batch in range(n_batchs):
            for i in range(0, len(X) - batch_size, batch_size):
                Xbatch = X[i: i + batch_size]
                y_model = model(Xbatch)
                y_batch = y[i: i + batch_size]
                loss = torch.sum(torch.sub(y_model, y_batch) ** 2)
                optimizer.zero_grad()
                loss.backward()
                optimizer.step()
        print("Finished epoch " + str(epoch) + ", latest loss " + str(loss.item()))
        checkpoint = {
            'epoch': n_epochs,
            'model_state_dict': model.state_dict(),
            'optimizer_state_dict': optimizer.state_dict(),
        }
        torch.save(checkpoint, "NN_TakeOff_2.pth")


# Vol test sur Flight Simulator :

def test_flight(nn_model, t_alt=500, t=240):

    sm = SimConnect()
    aq = AircraftRequests(sm, _time=2000)
    ae = AircraftEvents(sm)

    def cur_state(t_alt):
        cur = []

        cur.append(aq.get("PLANE_ALT_ABOVE_GROUND") / t_alt)
        cur.append((aq.get("PLANE_PITCH_DEGREES") + np.pi / 2) / np.pi)
        cur.append(aq.get("BRAKE_PARKING_POSITION"))
        cur.append(aq.get("GENERAL_ENG_THROTTLE_LEVER_POSITION:1") / 100)
        cur.append(aq.get("GROUND_VELOCITY") / 100)
        cur.append((aq.get("ELEVATOR_POSITION") + 1) / 2)
        print(cur)
        return cur

    b = True
    th = True
    alt = []

    ae.find("THROTTLE_FULL")()

    for i in range(t):

        alt_n = aq.get("PLANE_ALTITUDE")
        alt.append(alt_n)

        cur = cur_state(t_alt)
        X = torch.tensor(cur, dtype=torch.float32)
        y = nn_model(X)
        print(y)
        if y[0] < 0.45:
            ae.find("ELEV_DOWN")()
            print("Step " + str(i) + ": Down")
        elif y[0] > 0.55:
            ae.find("ELEV_UP")()
            print("Step " + str(i) + ": Up")
        elif y[1] > 0.5 and th :
            th = False
            ae.find("THROTTLE_FULL")()
            print("Step " + str(i) + ": Throttle Max")
        elif y[2] < 0.5 and b :
            b = False
            ae.find("PARKING_BRAKES")()
            print("Step " + str(i) + ": Parking Brake Down")
        else:
            print("Step " + str(i) + ": Keep")
        time.sleep(1)

    plt.plot(range(t), alt)
    plt.show()

def load_model():
    loaded_checkpoint = torch.load('NN_TakeOff_2.pth')
    loaded_model = nn.Sequential(
    nn.Linear(6, 18),
    nn.ReLU(),
    nn.Linear(18, 36),
    nn.ReLU(),
    nn.Linear(36,18),
    nn.ReLU(),
    nn.Linear(18,3),
    nn.ReLU()
    )
    loaded_optimizer = optim.SGD(loaded_model.parameters(), lr=0.01)
    loaded_model.load_state_dict(loaded_checkpoint['model_state_dict'])
    loaded_optimizer.load_state_dict(loaded_checkpoint['optimizer_state_dict'])
    return(loaded_model)


# Zone d'exécution :

#new_dataset(500)
#dX, dY = import_data()
#training(dX, dY)
NN = load_model()
test_flight(NN,250, 60)
